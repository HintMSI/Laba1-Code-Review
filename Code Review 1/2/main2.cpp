//FIXME исправлено оформление по код-стайлу
/*Хромой король.На квадратной доске расставлены монеты, достоинством от 1 до 100.
*Хромой король, находящийся в правом нижнем углу, мечтает попасть в левый верхний.
*При этом он может передвигаться только в клетку слева или сверху и хочет, чтобы сумма всех
*монет, оказавшихся у него на пути, была бы максимальной.Определить эту сумму и путь, каким
*образом должен двигаться король, чтобы ее собрать.Ввод и вывод организовать при помощи
*текстовых файлов.Формат входных данных : в первой строке входного файла записано число 
*N - размер доски(1 < N < 80).Далее следует N строк, каждая из которых содержит N целых чисел,
*представляющих доску.В первую строку выходного файл нужно вывести единственное число :
*максимальную сумму, а во второй строке вывести путь в виде строки символов, обозначив сим
*волом L движение влево, а символом U - движение вверх.
*/
#include "king.h"  
//FIXME добавлена проверка на входной файл

//FIXME исправлено на префиксную запись строки:16,17
int main() {
    ifstream inputFile("a.txt", ios::in);
    ofstream outputFile("b.txt", ios::out);

    if (!ValidateInputFile(inputFile)) {
        return 1;
    }
    vector<vector<int>> field1(n, vector<int>(n));  
    vector<vector<int>> field2(n, vector<int>(n));  
    vector<vector<char>> path(n, vector<char>(n));
    string directions = "";

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            inputFile >> field1[i][j];
        }
    }

    Solve(field1, field2, path);
    outputFile << "Максимальная сумма монет, которую может собрать король: " << field2[0][0] << '\n';
    PrintPath(path, directions);
    outputFile << "Путь: " << directions;

    inputFile.close();
    outputFile.close();

    cout << "Программа завершена. Ответ записан в файл b.txt";
    return 0;
}